###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet todo "TODO snippet" !b
// TODO: ${1:texto aqui} `date +%d/%m/%Y` by Jojo - jojoyuji@gmail.com$0
endsnippet

snippet fix "FIX snippet" !b
// FIX: ${1:texto aqui} `date +%d/%m/%Y` by Jojo - jojoyuji@gmail.com$0
endsnippet

snippet hack "HACK snippet" !b
// HACK: ${1:texto aqui} `date +%d/%m/%Y` by Jojo - jojoyuji@gmail.com$0
endsnippet

snippet note "NOTE snippet" !b
// NOTE: ${1:texto aqui} `date +%d/%m/%Y` by Jojo - jojoyuji@gmail.com$0
endsnippet

snippet warn "WARN snippet" !b
// WARN: ${1:texto aqui} `date +%d/%m/%Y` by Jojo - jojoyuji@gmail.com$0
endsnippet

snippet switch "switch" b
switch(${1:value}){
	case ${2:'${3:option}'}:
					 ${5}
					 break;
	default:
					 ${4}
}
endsnippet

snippet strict "use strict" !b
'use strict'; $0
endsnippet

snippet a "alert()" !b
alert(${VISUAL}${1:'${2:value}'});$0
endsnippet

snippet event "e.preventDefault()" b
${1:e}.preventDefault();$0
endsnippet

snippet event "e.stopPropagation()" b
${1:e}.stopPropagation();$0
endsnippet

snippet :, "Object Value JS"
		${1:value_name}: ${0:value},
endsnippet

snippet : "Object key key: 'value'"
	${1:key}: ${2:'${3:value}'}${4:, }
endsnippet

snippet proto "Prototype (proto)"
	${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) {
		${VISUAL}$0
	};
endsnippet

snippet jsf "excerpt() - Reducing text by word limit"
function excerpt(str, nwords) {
	var words = str.split(' ');
	words.splice(nwords, words.length-1);
	return words.join(' ') +
		(words.length !== str.split(' ').length ? '&hellip;' : '');
}
endsnippet
snippet jsf "getMaxHeight() - Get the maxHeight of a set of elements"
var getMaxHeight = function ($elms) {
	var maxHeight = 0;
	$elms.each(function () {
			// In some cases you may want to use outerHeight() instead
			var height = $(this).height();
			if (height > maxHeight) {
			maxHeight = height;
			}
			});
	return maxHeight;
};
endsnippet

snippet ready "jquery - $(funcion(){})" !b
$(function() {
		${1}
		});
endsnippet

snippet t "Ternary" b
(${1:a>b}) ? ${2:true} : ${3:false};$0
endsnippet

##################################
#  Javascript Object Extensions  #
##################################
snippet js "Array.getUnique()" !b
Array.prototype.getUnique = function() {
	var u = {}, a = [];
	for(var i = 0, l = this.length; i < l; ++i){
		if(u.hasOwnProperty(this[i])) {
			continue;
		}
		a.push(this[i]);
		u[this[i]] = 1;
	}
	return a;
}
endsnippet

snippet for "for (...) {...}"
for (var ${2:i}=0; $2 < ${1:Things}.length; $2++) {
	${3:$1[$2]}${VISUAL}$0
}
endsnippet


snippet fun "function (fun)"
function ${1:function_name} (${2:argument}) {
	${VISUAL}$0
}
endsnippet

snippet iife "Immediately-Invoked Function Expression (iife)"
(function (${1:argument}) {
 ${VISUAL}$0
 }(${2:$1}));
endsnippet

snippet ife "if ___ else"
if (${1:condition}) {
	${VISUAL}
}
else {
	${3://code}
}
endsnippet

snippet sto "setTimeout()" !b
setTimeout(${2:function() {
	${VISUAL}${3}
}}, ${1:500});
endsnippet

snippet sti "setInterval()" !b
setInterval(${2:function() {
	${VISUAL}${3}
}}, ${1:500});
endsnippet

snippet cli "clearInterval()" !b
cleatInterval(${2:var});
endsnippet
snippet clt "clearTimeout()" !b
cleatTimeout(${2:var});
endsnippet

snippet if "if"
if (${1:condition}) {
	${VISUAL}
	$0
}
endsnippet

snippet timeout "setTimeout function"
setTimeout(function() {
	${VISUAL}$0
}${2:.bind(${3:this})}, ${1:10});
endsnippet

# Snippets for Console Debug Output

snippet d "debugger"
debugger;
endsnippet

snippet log "console.log"
console.log(${VISUAL}${1:'${2:value}'});
endsnippet
snippet logy "fancy console.log"
console.log('%c ${1:minha mensagem}', 'font-family: Lato, sans-serif; line-height: 1em; color: #00ccff; font-weight:bold; font-size: 121px; text-shadow:0px 0px 0 rgb(-66,138,189),0px 1px 0 rgb(-79,125,176),0px 2px 0 rgb(-93,111,162),0px 3px 0 rgb(-107,97,148),0px 4px 0 rgb(-120,84,135),0px 5px 0 rgb(-134,70,121), 0px 6px 0 rgb(-148,56,107),0px 7px 6px rgba(0,0,0,0.65),0px 7px 1px rgba(0,0,0,0.5),0px 0px 6px rgba(0,0,0,.2);');
endsnippet
snippet cl "console.log"
console.log(${VISUAL}${1:'${2:value}'});
endsnippet

snippet cw "console.warn"
console.warn(${1:'${2:value}'});
endsnippet

snippet ci "console.info"
console.info(${VISUAL}${1:'${2:value}'});
endsnippet
snippet ce "console.error"
console.error(${VISUAL}${1:'${2:value}'});
endsnippet

snippet ca "console.assert"
console.assert(${VISUAL}${1:assertion}, ${2:'${3:message}'});
endsnippet

snippet try "try-catch" !b
try{
	${VISUAL}
	${1://do something here}
	${2:throw ${3:errr};}
}
catch(${4:err}){
	${5}
}$0
endsnippet

snippet cgroup "console.group"
console.group('${1:label}');
${VISUAL}$0
console.groupEnd();
endsnippet

snippet ctime "console.time"
console.time('${1:label}');
${VISUAL}$0
console.timeEnd('$1');
endsnippet

snippet ctimestamp "console.timestamp"
console.timeStamp('${1:label}')
endsnippet

snippet ctrace "console.trace"
console.trace();
endsnippet

snippet f "Anonymous Function" i
$0function(${2:e}) {
	${VISUAL}
}${1:,}
endsnippet

snippet f "Arrow function" i
$0(${2:e}) => {
	${VISUAL}
}${1:,}
endsnippet

#snippet af "Arrow function alone" i
#$0(${1:e}) => {
	#${VISUAL}
#}${2:,}
#endsnippet

snippet callback "Callback" !b
if (${1:callback} && typeof($1) === 'function') {
	$1();
}$0
endsnippet


snippet r "return" !b
return ${1:value};$0
endsnippet

snippet imp "import ES5" !b
import ${1} from '${2}';${0}
endsnippet

snippet req "Description" b
const ${1} = require('${2}');${3}${0}
endsnippet



# vim:ft=snippets:
